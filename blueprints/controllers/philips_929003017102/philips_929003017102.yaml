# Blueprint metadata
blueprint:
  name: Controller - Philips 929003017102 Hue Wall Switch
  description: |
    # Controller - Philips 929003017102 Hue Wall Switch

    Controller automation for executing any kind of action triggered by the provided Philips 929002398602 Hue Dimmer switch v2. Allows to optionally loop an action on a button long press.
    Supports ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602#available-hooks) for additional details.

    ## More Info

    ‚ÑπÔ∏è Version 2025.04.19
    üìù [Changelog](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602/#changelog)
    üìï Full documentation regarding this blueprint is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/philips_929002398602).

    üöÄ This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**! üåü

  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/philips_929002398602/philips_929002398602.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (ZHA, Zigbee2MQTT Required) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/929002398602.html#philips-929002398602
            - integration: mqtt
              manufacturer: Philips
              model: Hue wall switch module
            # For backwards compatability with z2m 1.x. model_id is added to end of model rather than a seperate attribute in z2m 2.x
            - integration: mqtt
              manufacturer: Philips
              model: Hue wall switch module (929003017102)
            # source: https://github.com/dresden-elektronik/deconz-rest-plugin/wiki/Supported-Devices
            - integration: zha
              manufacturer: Philips
              # **TBConfirmed** model:
            - integration: deconz
              manufacturer: Philips
              # **TBConfirmed** model:
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    # inputs for custom actions
    action_left_press:
      name: (Optional) On left button press
      description: (...)
      default: []
      selector:
        action:
    action_left_press_release:
      name: (Optional) On left button release
      description: (...)
      default: []
      selector:
        action:
    action_right_press:
      name: (Optional) On right button press
      description: Action to run on on button release after long press.
      default: []
      selector:
        action:
    action_right_press_release:
      name: (Optional) On right button release
      description: Action to run on double on button press.
      default: []
      selector:
        action:
    action_left_hold:
      name: (Optional) Off button short press
      description: Action to run on short off button press.
      default: []
      selector:
        action:
    action_left_hold_release:
      name: (Optional) Off button long press
      description: Action to run on long off button press.
      default: []
      selector:
        action:
    action_right_hold:
      name: (Optional) Off button release
      description: Action to run on off button release after long press.
      default: []
      selector:
        action:
    action_right_hold_release:
      name: (Optional) (Virtual) Off button double press
      description: Action to run on double off button press.
      default: []
      selector:
        action:
    action_toggle:
      name: (Optional) Up button short press
      description: Action to run on short up button press.
      default: []
      selector:
        action:
    action_brightness_move_up:
      name: (Optional) Up button long press
      description: Action to run on long up button press.
      default: []
      selector:
        action:
    action_brightness_move_down:
      name: (Optional) Up button release
      description: Action to run on up button release after long press.
      default: []
      selector:
        action:
    action_brightness_stop:
      name: (Optional) (Virtual) Up button double press
      description: Action to run on double up button press.
      default: []
      selector:
        action:
    # inputs for enabling double press events
    # helpers used to properly recognize the remote button events
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  button_on_long_loop: !input button_on_long_loop
  button_on_long_max_loop_repeats: !input button_on_long_max_loop_repeats
  button_on_double_press: !input button_on_double_press
  button_off_long_loop: !input button_off_long_loop
  button_off_long_max_loop_repeats: !input button_off_long_max_loop_repeats
  button_off_double_press: !input button_off_double_press
  button_up_long_loop: !input button_up_long_loop
  button_up_long_max_loop_repeats: !input button_up_long_max_loop_repeats
  button_up_double_press: !input button_up_double_press
  button_down_long_loop: !input button_down_long_loop
  button_down_long_max_loop_repeats: !input button_down_long_max_loop_repeats
  button_down_double_press: !input button_down_double_press
  helper_last_controller_event: !input helper_last_controller_event
  helper_double_press_delay: !input helper_double_press_delay
  helper_debounce_delay: !input helper_debounce_delay
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # adjusted debounce delay so that the resulting double press delay is exactly as specified by the user when running the action, taking also account of debouncing
  # make sure it never goes below the minimum double press delay
  adjusted_double_press_delay: '{{ [helper_double_press_delay - helper_debounce_delay, 100] | max }}'
  # mapping between actions and integrations
  actions_mapping:
    zha:
      button_on_short: [on_press, on_press_release]
      button_on_long: [on_hold]
      button_on_release: [on_long_release]
      button_off_short: [off_press, off_press_release]
      button_off_long: [off_hold]
      button_off_release: [off_long_release]
      button_up_short: [up_press]
      button_up_long: [up_hold]
      button_up_release: [up_long_release]
      button_down_short: [down_press]
      button_down_long: [down_hold]
      button_down_release: [down_long_release]
    zigbee2mqtt:
      # source: https://www.zigbee2mqtt.io/devices/929002398602.html#philips-929002398602
      button_left_press: [left_press]
      button_left_press_release: [left_press_release]
      button_right_press: [right_press]
      button_right_press_release: [right_press_release]
      button_left_hold: [left_hold]
      button_left_hold_release: [left_hold_release]
      button_right_hold: [right_hold]
      button_right_hold_release: [right_hold_release]
      button_toggle: [toggle]
      button_brightness_move_up: [brightness_move_up]
      button_brightness_move_down: [brightness_move_down]
      button_brightness_stop: [brightness_stop]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_left_press: '{{ actions_mapping[integration_id]["button_left_press"] }}'
  button_left_press_release: '{{ actions_mapping[integration_id]["button_left_press_release"] }}'
  button_right_press: '{{ actions_mapping[integration_id]["button_right_press"] }}'
  button_right_press_release: '{{ actions_mapping[integration_id]["button_right_press_release"] }}'
  button_left_hold: '{{ actions_mapping[integration_id]["button_left_hold"] }}'
  button_left_hold_release: '{{ actions_mapping[integration_id]["button_left_hold_release"] }}'
  button_right_hold: '{{ actions_mapping[integration_id]["button_right_hold"] }}'
  button_right_hold_release: '{{ actions_mapping[integration_id]["button_right_hold_release"] }}'
  button_toggle: '{{ actions_mapping[integration_id]["button_toggle"] }}'
  button_brightness_move_up: '{{ actions_mapping[integration_id]["button_brightness_move_up"] }}'
  button_brightness_move_down: '{{ actions_mapping[integration_id]["button_brightness_move_down"] }}'
  button_brightness_stop: '{{ actions_mapping[integration_id]["button_brightness_stop"] }}'
  # build data to send within a controller event
  controller_id: !input controller_device
mode: restart
max_exceeded: silent
triggers:
  # triggers for zigbee2mqtt mqtt device action
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_press
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_press_release
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_press
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_press_release
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_hold
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: left_hold_release
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_hold
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: right_hold_release
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: toggle
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: brightness_move_up
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: brightness_move_down
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: brightness_stop
  # triggers for other integrations
  - trigger: event
    event_type:
      - zha_event
    event_data:
      device_id: !input controller_device
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
actions:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}
        {%- endif -%}
      deserialized_state: '{{ (states(helper_last_controller_event) | from_json) if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{\s*?((\"a\":\s*?\".*\"|\"t\":\s*?\d+\.\d+)(,\s*?)?){2}\s*?\}$")) else {} }}'
      trigger_delta: '{{ (as_timestamp(now()) - (deserialized_state.t | default(0))) * 1000 }}'
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in button_left_press }}'
        sequence: !input action_button_left_press
      - conditions: '{{ trigger_action | string in button_left_press_release }}'
        sequence: !input action_button_left_press_release
      - conditions: '{{ trigger_action | string in button_right_press }}'
        sequence: !input action_button_right_press
      - conditions: '{{ trigger_action | string in button_right_press_release }}'
        sequence: !input action_button_right_press_release
      - conditions: '{{ trigger_action | string in button_left_hold }}'
        sequence: !input action_button_left_hold
      - conditions: '{{ trigger_action | string in button_left_hold_release }}'
        sequence: !input action_button_left_hold_release
      - conditions: '{{ trigger_action | string in button_right_hold }}'
        sequence: !input action_button_right_hold
      - conditions: '{{ trigger_action | string in button_right_hold_release }}'
        sequence: !input action_button_right_hold_release
      - conditions: '{{ trigger_action | string in button_toggle }}'
        sequence: !input action_button_toggle
      - conditions: '{{ trigger_action | string in button_brightness_move_up }}'
        sequence: !input action_button_brightness_move_up
      - conditions: '{{ trigger_action | string in button_brightness_move_down }}'
        sequence: !input action_button_brightness_move_down
      - conditions: '{{ trigger_action | string in button_brightness_stop }}'
        sequence: !input action_button_brightness_stop
